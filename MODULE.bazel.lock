{
  "lockFileVersion": 3,
  "moduleFileHash": "15820de4b64dd9c599679a98d71b77b1b35f58353ab20e06266f8a93d94f1e99",
  "flags": {
    "cmdRegistries": [
      "https://bcr.bazel.build/"
    ],
    "cmdModuleOverrides": {},
    "allowedYankedVersions": [],
    "envVarAllowedYankedVersions": "",
    "ignoreDevDependency": false,
    "directDependenciesMode": "WARNING",
    "compatibilityMode": "ERROR"
  },
  "localOverrideHashes": {
    "bazel_tools": "922ea6752dc9105de5af957f7a99a6933c0a6a712d23df6aad16a9c399f7e787"
  },
  "moduleDepGraph": {
    "<root>": {
      "name": "",
      "version": "",
      "key": "<root>",
      "repoName": "",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@rust_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_rust//rust:extensions.bzl",
          "extensionName": "rust",
          "usingModule": "<root>",
          "location": {
            "file": "@@//:MODULE.bazel",
            "line": 10,
            "column": 21
          },
          "imports": {
            "rust_toolchains": "rust_toolchains"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "toolchain",
              "attributeValues": {
                "edition": "2021",
                "versions": [
                  "1.75.0"
                ]
              },
              "devDependency": false,
              "location": {
                "file": "@@//:MODULE.bazel",
                "line": 11,
                "column": 15
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_rust//crate_universe:extension.bzl",
          "extensionName": "crate",
          "usingModule": "<root>",
          "location": {
            "file": "@@//:MODULE.bazel",
            "line": 18,
            "column": 22
          },
          "imports": {
            "crates": "crates"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "from_cargo",
              "attributeValues": {
                "name": "crates",
                "cargo_lockfile": "//:Cargo.lock",
                "manifests": [
                  "//:Cargo.toml"
                ]
              },
              "devDependency": false,
              "location": {
                "file": "@@//:MODULE.bazel",
                "line": 22,
                "column": 17
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_rust": "rules_rust@0.56.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "rules_rust@0.56.0": {
      "name": "rules_rust",
      "version": "0.56.0",
      "key": "rules_rust@0.56.0",
      "repoName": "rules_rust",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@rust_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_rust//rust/private:internal_extensions.bzl",
          "extensionName": "i",
          "usingModule": "rules_rust@0.56.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_rust/0.56.0/MODULE.bazel",
            "line": 42,
            "column": 30
          },
          "imports": {
            "rrra__anyhow-1.0.71": "rrra__anyhow-1.0.71",
            "rrra__clap-4.3.11": "rrra__clap-4.3.11",
            "rrra__env_logger-0.10.0": "rrra__env_logger-0.10.0",
            "rrra__itertools-0.11.0": "rrra__itertools-0.11.0",
            "rrra__log-0.4.19": "rrra__log-0.4.19",
            "rrra__serde-1.0.171": "rrra__serde-1.0.171",
            "rrra__serde_json-1.0.102": "rrra__serde_json-1.0.102",
            "rules_rust_tinyjson": "rules_rust_tinyjson"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_rust//rust:extensions.bzl",
          "extensionName": "rust",
          "usingModule": "rules_rust@0.56.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_rust/0.56.0/MODULE.bazel",
            "line": 55,
            "column": 21
          },
          "imports": {
            "rust_toolchains": "rust_toolchains"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "toolchain",
              "attributeValues": {
                "edition": "2021"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_rust/0.56.0/MODULE.bazel",
                "line": 56,
                "column": 15
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_rust//rust:extensions.bzl",
          "extensionName": "rust_host_tools",
          "usingModule": "rules_rust@0.56.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_rust/0.56.0/MODULE.bazel",
            "line": 63,
            "column": 32
          },
          "imports": {
            "rust_host_tools": "rust_host_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_rust//crate_universe/private:internal_extensions.bzl",
          "extensionName": "cu",
          "usingModule": "rules_rust@0.56.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_rust/0.56.0/MODULE.bazel",
            "line": 99,
            "column": 45
          },
          "imports": {
            "cargo_bazel.buildifier-darwin-amd64": "cargo_bazel.buildifier-darwin-amd64",
            "cargo_bazel.buildifier-darwin-arm64": "cargo_bazel.buildifier-darwin-arm64",
            "cargo_bazel.buildifier-linux-amd64": "cargo_bazel.buildifier-linux-amd64",
            "cargo_bazel.buildifier-linux-arm64": "cargo_bazel.buildifier-linux-arm64",
            "cargo_bazel.buildifier-linux-s390x": "cargo_bazel.buildifier-linux-s390x",
            "cargo_bazel.buildifier-windows-amd64.exe": "cargo_bazel.buildifier-windows-amd64.exe",
            "cargo_bazel_bootstrap": "cargo_bazel_bootstrap",
            "cui": "cui",
            "cui__anyhow-1.0.89": "cui__anyhow-1.0.89",
            "cui__camino-1.1.9": "cui__camino-1.1.9",
            "cui__cargo-lock-10.0.1": "cui__cargo-lock-10.0.1",
            "cui__cargo-platform-0.1.9": "cui__cargo-platform-0.1.9",
            "cui__cargo_metadata-0.19.1": "cui__cargo_metadata-0.19.1",
            "cui__cargo_toml-0.20.5": "cui__cargo_toml-0.20.5",
            "cui__cfg-expr-0.17.2": "cui__cfg-expr-0.17.2",
            "cui__clap-4.3.11": "cui__clap-4.3.11",
            "cui__crates-index-3.3.0": "cui__crates-index-3.3.0",
            "cui__hex-0.4.3": "cui__hex-0.4.3",
            "cui__indoc-2.0.5": "cui__indoc-2.0.5",
            "cui__itertools-0.13.0": "cui__itertools-0.13.0",
            "cui__maplit-1.0.2": "cui__maplit-1.0.2",
            "cui__normpath-1.3.0": "cui__normpath-1.3.0",
            "cui__once_cell-1.20.2": "cui__once_cell-1.20.2",
            "cui__pathdiff-0.2.3": "cui__pathdiff-0.2.3",
            "cui__regex-1.11.0": "cui__regex-1.11.0",
            "cui__semver-1.0.23": "cui__semver-1.0.23",
            "cui__serde-1.0.210": "cui__serde-1.0.210",
            "cui__serde_json-1.0.129": "cui__serde_json-1.0.129",
            "cui__serde_starlark-0.1.16": "cui__serde_starlark-0.1.16",
            "cui__sha2-0.10.8": "cui__sha2-0.10.8",
            "cui__spdx-0.10.7": "cui__spdx-0.10.7",
            "cui__tempfile-3.14.0": "cui__tempfile-3.14.0",
            "cui__tera-1.19.1": "cui__tera-1.19.1",
            "cui__textwrap-0.16.1": "cui__textwrap-0.16.1",
            "cui__toml-0.8.19": "cui__toml-0.8.19",
            "cui__tracing-0.1.40": "cui__tracing-0.1.40",
            "cui__tracing-subscriber-0.3.18": "cui__tracing-subscriber-0.3.18",
            "cui__url-2.5.2": "cui__url-2.5.2",
            "cui__walkdir-2.5.0": "cui__walkdir-2.5.0"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.21.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.0.17",
        "rules_license": "rules_license@1.0.0",
        "rules_shell": "rules_shell@0.3.0",
        "build_bazel_apple_support": "apple_support@1.17.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_rust~0.56.0",
          "urls": [
            "https://github.com/bazelbuild/rules_rust/releases/download/0.56.0/rules_rust-0.56.0.tar.gz"
          ],
          "integrity": "sha256-8TBqrAsli3kN8BrZq8arsN8LZUFsdLTvJ/Sqsph4CmQ=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "bazel_tools@_": {
      "name": "bazel_tools",
      "version": "",
      "key": "bazel_tools@_",
      "repoName": "bazel_tools",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all",
        "@local_config_sh//:local_sh_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_tools//tools/cpp:cc_configure.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 17,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/osx:xcode_configure.bzl",
          "extensionName": "xcode_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 21,
            "column": 32
          },
          "imports": {
            "local_config_xcode": "local_config_xcode"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 24,
            "column": 32
          },
          "imports": {
            "local_jdk": "local_jdk",
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/sh:sh_configure.bzl",
          "extensionName": "sh_configure_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 35,
            "column": 39
          },
          "imports": {
            "local_config_sh": "local_config_sh"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/test:extensions.bzl",
          "extensionName": "remote_coverage_tools_extension",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 39,
            "column": 48
          },
          "imports": {
            "remote_coverage_tools": "remote_coverage_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": "@bazel_tools//tools/android:android_extensions.bzl",
          "extensionName": "remote_android_tools_extensions",
          "usingModule": "bazel_tools@_",
          "location": {
            "file": "@@bazel_tools//:MODULE.bazel",
            "line": 42,
            "column": 42
          },
          "imports": {
            "android_gmaven_r8": "android_gmaven_r8",
            "android_tools": "android_tools"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_cc": "rules_cc@0.0.17",
        "rules_java": "rules_java@7.1.0",
        "rules_license": "rules_license@1.0.0",
        "rules_proto": "rules_proto@4.0.0",
        "rules_python": "rules_python@0.10.2",
        "platforms": "platforms@0.0.10",
        "com_google_protobuf": "protobuf@27.0",
        "zlib": "zlib@1.3",
        "build_bazel_apple_support": "apple_support@1.17.1",
        "local_config_platform": "local_config_platform@_"
      }
    },
    "local_config_platform@_": {
      "name": "local_config_platform",
      "version": "",
      "key": "local_config_platform@_",
      "repoName": "local_config_platform",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_"
      }
    },
    "bazel_features@1.21.0": {
      "name": "bazel_features",
      "version": "1.21.0",
      "key": "bazel_features@1.21.0",
      "repoName": "bazel_features",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@bazel_features//private:extensions.bzl",
          "extensionName": "version_extension",
          "usingModule": "bazel_features@1.21.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/bazel_features/1.21.0/MODULE.bazel",
            "line": 15,
            "column": 24
          },
          "imports": {
            "bazel_features_globals": "bazel_features_globals",
            "bazel_features_version": "bazel_features_version"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_features~1.21.0",
          "urls": [
            "https://github.com/bazel-contrib/bazel_features/releases/download/v1.21.0/bazel_features-v1.21.0.tar.gz"
          ],
          "integrity": "sha256-rz1Psc9PJZQstKkzsa2ToOqf6e5wwq9/Np+3KmfCZuU=",
          "strip_prefix": "bazel_features-1.21.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/bazel_features/1.21.0/patches/module_dot_bazel_version.patch": "sha256-dCsdHmWKr8bbJmBCuD7tIB8xubDrH8pHR6HFQdH1m9g="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "bazel_skylib@1.7.1": {
      "name": "bazel_skylib",
      "version": "1.7.1",
      "key": "bazel_skylib@1.7.1",
      "repoName": "bazel_skylib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains/unittest:cmd_toolchain",
        "//toolchains/unittest:bash_toolchain"
      ],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.10",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "bazel_skylib~1.7.1",
          "urls": [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz"
          ],
          "integrity": "sha256-vCg8381SalLDIBJ5zaS8KYZS76iYsQtNsIN9xRZSdW8=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "platforms@0.0.10": {
      "name": "platforms",
      "version": "0.0.10",
      "key": "platforms@0.0.10",
      "repoName": "platforms",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@platforms//host:extension.bzl",
          "extensionName": "host_platform",
          "usingModule": "platforms@0.0.10",
          "location": {
            "file": "https://bcr.bazel.build/modules/platforms/0.0.10/MODULE.bazel",
            "line": 9,
            "column": 30
          },
          "imports": {
            "host_platform": "host_platform"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "platforms",
          "urls": [
            "https://github.com/bazelbuild/platforms/releases/download/0.0.10/platforms-0.0.10.tar.gz"
          ],
          "integrity": "sha256-IY7+juc20mo1cmY7N0olPAErcW2K8MB+hC6C8jigp+4=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_cc@0.0.17": {
      "name": "rules_cc",
      "version": "0.0.17",
      "key": "rules_cc@0.0.17",
      "repoName": "rules_cc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_cc//cc:extensions.bzl",
          "extensionName": "cc_configure_extension",
          "usingModule": "rules_cc@0.0.17",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_cc/0.0.17/MODULE.bazel",
            "line": 12,
            "column": 29
          },
          "imports": {
            "local_config_cc": "local_config_cc",
            "local_config_cc_toolchains": "local_config_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.21.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "com_google_protobuf": "protobuf@27.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_cc~0.0.17",
          "urls": [
            "https://github.com/bazelbuild/rules_cc/releases/download/0.0.17/rules_cc-0.0.17.tar.gz"
          ],
          "integrity": "sha256-q8YF3YUPgTuzcAS3fbIBBqGTEalrLaHJK3idpSnSj+E=",
          "strip_prefix": "rules_cc-0.0.17",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_cc/0.0.17/patches/module_dot_bazel_version.patch": "sha256-sfVrLZhaiHSPIY77QupwdEJksH2dHNAaq9lFTB60OYI="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_license@1.0.0": {
      "name": "rules_license",
      "version": "1.0.0",
      "key": "rules_license@1.0.0",
      "repoName": "rules_license",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_license~1.0.0",
          "urls": [
            "https://github.com/bazelbuild/rules_license/releases/download/1.0.0/rules_license-1.0.0.tar.gz"
          ],
          "integrity": "sha256-JtQCH2iY4juC75UweDid1JrCtWGKxWSt5O+HzO0Uezg=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_shell@0.3.0": {
      "name": "rules_shell",
      "version": "0.3.0",
      "key": "rules_shell@0.3.0",
      "repoName": "rules_shell",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_shell//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_shell//shell/private/extensions:sh_configure.bzl",
          "extensionName": "sh_configure",
          "usingModule": "rules_shell@0.3.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_shell/0.3.0/MODULE.bazel",
            "line": 10,
            "column": 29
          },
          "imports": {
            "local_config_shell": "local_config_shell"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.21.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_shell~0.3.0",
          "urls": [
            "https://github.com/bazelbuild/rules_shell/releases/download/v0.3.0/rules_shell-v0.3.0.tar.gz"
          ],
          "integrity": "sha256-2M1KOpH8HcaNTH1rZV8J3vEJ9xhkN+P1Cptgq0NqDFM=",
          "strip_prefix": "rules_shell-0.3.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_shell/0.3.0/patches/module_dot_bazel_version.patch": "sha256-EmJAIbA/eRUtmeJTyvxoadXCXqGv5+NfMx2LAlAy+2Q="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "apple_support@1.17.1": {
      "name": "apple_support",
      "version": "1.17.1",
      "key": "apple_support@1.17.1",
      "repoName": "build_bazel_apple_support",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@local_config_apple_cc_toolchains//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@build_bazel_apple_support//crosstool:setup.bzl",
          "extensionName": "apple_cc_configure_extension",
          "usingModule": "apple_support@1.17.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/apple_support/1.17.1/MODULE.bazel",
            "line": 20,
            "column": 35
          },
          "imports": {
            "local_config_apple_cc": "local_config_apple_cc",
            "local_config_apple_cc_toolchains": "local_config_apple_cc_toolchains"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_features": "bazel_features@1.21.0",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "platforms": "platforms@0.0.10",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "apple_support~1.17.1",
          "urls": [
            "https://github.com/bazelbuild/apple_support/releases/download/1.17.1/apple_support.1.17.1.tar.gz"
          ],
          "integrity": "sha256-tT9kkedCVJ8ThmYo3f/MddHzstaYfcTxShayQhE8iQs=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/apple_support/1.17.1/patches/module_dot_bazel_version.patch": "sha256-a16RdMX1fJF/OgGZLN/bKckiJ0KMc2dzsqBCJ0xKIwU="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_java@7.1.0": {
      "name": "rules_java",
      "version": "7.1.0",
      "key": "rules_java@7.1.0",
      "repoName": "rules_java",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "//toolchains:all",
        "@local_jdk//:runtime_toolchain_definition",
        "@local_jdk//:bootstrap_runtime_toolchain_definition",
        "@remotejdk11_linux_toolchain_config_repo//:all",
        "@remotejdk11_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk11_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk11_macos_toolchain_config_repo//:all",
        "@remotejdk11_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk11_win_toolchain_config_repo//:all",
        "@remotejdk11_win_arm64_toolchain_config_repo//:all",
        "@remotejdk17_linux_toolchain_config_repo//:all",
        "@remotejdk17_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_linux_ppc64le_toolchain_config_repo//:all",
        "@remotejdk17_linux_s390x_toolchain_config_repo//:all",
        "@remotejdk17_macos_toolchain_config_repo//:all",
        "@remotejdk17_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk17_win_toolchain_config_repo//:all",
        "@remotejdk17_win_arm64_toolchain_config_repo//:all",
        "@remotejdk21_linux_toolchain_config_repo//:all",
        "@remotejdk21_linux_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_macos_toolchain_config_repo//:all",
        "@remotejdk21_macos_aarch64_toolchain_config_repo//:all",
        "@remotejdk21_win_toolchain_config_repo//:all"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_java//java:extensions.bzl",
          "extensionName": "toolchains",
          "usingModule": "rules_java@7.1.0",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_java/7.1.0/MODULE.bazel",
            "line": 19,
            "column": 27
          },
          "imports": {
            "remote_java_tools": "remote_java_tools",
            "remote_java_tools_linux": "remote_java_tools_linux",
            "remote_java_tools_windows": "remote_java_tools_windows",
            "remote_java_tools_darwin_x86_64": "remote_java_tools_darwin_x86_64",
            "remote_java_tools_darwin_arm64": "remote_java_tools_darwin_arm64",
            "local_jdk": "local_jdk",
            "remotejdk11_linux_toolchain_config_repo": "remotejdk11_linux_toolchain_config_repo",
            "remotejdk11_linux_aarch64_toolchain_config_repo": "remotejdk11_linux_aarch64_toolchain_config_repo",
            "remotejdk11_linux_ppc64le_toolchain_config_repo": "remotejdk11_linux_ppc64le_toolchain_config_repo",
            "remotejdk11_linux_s390x_toolchain_config_repo": "remotejdk11_linux_s390x_toolchain_config_repo",
            "remotejdk11_macos_toolchain_config_repo": "remotejdk11_macos_toolchain_config_repo",
            "remotejdk11_macos_aarch64_toolchain_config_repo": "remotejdk11_macos_aarch64_toolchain_config_repo",
            "remotejdk11_win_toolchain_config_repo": "remotejdk11_win_toolchain_config_repo",
            "remotejdk11_win_arm64_toolchain_config_repo": "remotejdk11_win_arm64_toolchain_config_repo",
            "remotejdk17_linux_toolchain_config_repo": "remotejdk17_linux_toolchain_config_repo",
            "remotejdk17_linux_aarch64_toolchain_config_repo": "remotejdk17_linux_aarch64_toolchain_config_repo",
            "remotejdk17_linux_ppc64le_toolchain_config_repo": "remotejdk17_linux_ppc64le_toolchain_config_repo",
            "remotejdk17_linux_s390x_toolchain_config_repo": "remotejdk17_linux_s390x_toolchain_config_repo",
            "remotejdk17_macos_toolchain_config_repo": "remotejdk17_macos_toolchain_config_repo",
            "remotejdk17_macos_aarch64_toolchain_config_repo": "remotejdk17_macos_aarch64_toolchain_config_repo",
            "remotejdk17_win_toolchain_config_repo": "remotejdk17_win_toolchain_config_repo",
            "remotejdk17_win_arm64_toolchain_config_repo": "remotejdk17_win_arm64_toolchain_config_repo",
            "remotejdk21_linux_toolchain_config_repo": "remotejdk21_linux_toolchain_config_repo",
            "remotejdk21_linux_aarch64_toolchain_config_repo": "remotejdk21_linux_aarch64_toolchain_config_repo",
            "remotejdk21_macos_toolchain_config_repo": "remotejdk21_macos_toolchain_config_repo",
            "remotejdk21_macos_aarch64_toolchain_config_repo": "remotejdk21_macos_aarch64_toolchain_config_repo",
            "remotejdk21_win_toolchain_config_repo": "remotejdk21_win_toolchain_config_repo"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.0.17",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_proto": "rules_proto@4.0.0",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_java~7.1.0",
          "urls": [
            "https://github.com/bazelbuild/rules_java/releases/download/7.1.0/rules_java-7.1.0.tar.gz"
          ],
          "integrity": "sha256-o3pOX2OrgnFuXdau75iO2EYcegC46TYnImKJn1h81OE=",
          "strip_prefix": "",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_proto@4.0.0": {
      "name": "rules_proto",
      "version": "4.0.0",
      "key": "rules_proto@4.0.0",
      "repoName": "rules_proto",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_cc": "rules_cc@0.0.17",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_proto~4.0.0",
          "urls": [
            "https://github.com/bazelbuild/rules_proto/archive/refs/tags/4.0.0.zip"
          ],
          "integrity": "sha256-Lr5z6xyuRA19pNtRYMGjKaynwQpck4H/lwYyVjyhoq4=",
          "strip_prefix": "rules_proto-4.0.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_proto/4.0.0/patches/module_dot_bazel.patch": "sha256-MclJO7tIAM2ElDAmscNId9pKTpOuDGHgVlW/9VBOIp0="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "rules_python@0.10.2": {
      "name": "rules_python",
      "version": "0.10.2",
      "key": "rules_python@0.10.2",
      "repoName": "rules_python",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [
        "@bazel_tools//tools/python:autodetecting_toolchain"
      ],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_python//python:extensions.bzl",
          "extensionName": "pip_install",
          "usingModule": "rules_python@0.10.2",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_python/0.10.2/MODULE.bazel",
            "line": 7,
            "column": 28
          },
          "imports": {
            "pypi__click": "pypi__click",
            "pypi__colorama": "pypi__colorama",
            "pypi__installer": "pypi__installer",
            "pypi__pep517": "pypi__pep517",
            "pypi__pip": "pypi__pip",
            "pypi__pip_tools": "pypi__pip_tools",
            "pypi__setuptools": "pypi__setuptools",
            "pypi__tomli": "pypi__tomli",
            "pypi__wheel": "pypi__wheel"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_python~0.10.2",
          "urls": [
            "https://github.com/bazelbuild/rules_python/archive/refs/tags/0.10.2.tar.gz"
          ],
          "integrity": "sha256-o6bpn0l74In4HsCCiC5AJGv9Q19S9OgvN+iUSbBFc/Y=",
          "strip_prefix": "rules_python-0.10.2",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_python/0.10.2/patches/module_dot_bazel.patch": "sha256-TScILAmXmmMtjJIwhLrgNZgqGPs6G3OAzXaLXLDNFrA="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "protobuf@27.0": {
      "name": "protobuf",
      "version": "27.0",
      "key": "protobuf@27.0",
      "repoName": "com_google_protobuf",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_google_absl": "abseil-cpp@20230802.0.bcr.1",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "jsoncpp": "jsoncpp@1.9.5",
        "rules_cc": "rules_cc@0.0.17",
        "rules_java": "rules_java@7.1.0",
        "rules_jvm_external": "rules_jvm_external@5.1",
        "rules_pkg": "rules_pkg@0.7.0",
        "rules_python": "rules_python@0.10.2",
        "platforms": "platforms@0.0.10",
        "zlib": "zlib@1.3",
        "rules_proto": "rules_proto@4.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "protobuf~27.0",
          "urls": [
            "https://github.com/protocolbuffers/protobuf/releases/download/v27.0/protobuf-27.0.zip"
          ],
          "integrity": "sha256-PhFI2wkP8hImwYiO85+nvHeQBCviH/Qon9Ic4XNfNFU=",
          "strip_prefix": "protobuf-27.0",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "zlib@1.3": {
      "name": "zlib",
      "version": "1.3",
      "key": "zlib@1.3",
      "repoName": "zlib",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.0.17",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "zlib~1.3",
          "urls": [
            "https://github.com/madler/zlib/releases/download/v1.3/zlib-1.3.tar.gz"
          ],
          "integrity": "sha256-/wukwpIBPbwnUws6geH5qBPNOd4Byl4Pi/NVcC76WT4=",
          "strip_prefix": "zlib-1.3",
          "remote_patches": {
            "https://bcr.bazel.build/modules/zlib/1.3/patches/add_build_file.patch": "sha256-Ei+FYaaOo7A3jTKunMEodTI0Uw5NXQyZEcboMC8JskY=",
            "https://bcr.bazel.build/modules/zlib/1.3/patches/module_dot_bazel.patch": "sha256-fPWLM+2xaF/kuy+kZc1YTfW6hNjrkG400Ho7gckuyJk="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "abseil-cpp@20230802.0.bcr.1": {
      "name": "abseil-cpp",
      "version": "20230802.0.bcr.1",
      "key": "abseil-cpp@20230802.0.bcr.1",
      "repoName": "abseil-cpp",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_cc": "rules_cc@0.0.17",
        "platforms": "platforms@0.0.10",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "com_google_googletest": "googletest@1.14.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "abseil-cpp~20230802.0.bcr.1",
          "urls": [
            "https://github.com/abseil/abseil-cpp/archive/refs/tags/20230802.0.tar.gz"
          ],
          "integrity": "sha256-WdKXavnW7PABqBo1dJpuVRozW5SdNJGM+t4Hc3udk8U=",
          "strip_prefix": "abseil-cpp-20230802.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/abseil-cpp/20230802.0.bcr.1/patches/module_dot_bazel.patch": "sha256-Ku6wJ7uNqANq3fVmW03ySSUddevratZDsJ67NqtXIEY="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "jsoncpp@1.9.5": {
      "name": "jsoncpp",
      "version": "1.9.5",
      "key": "jsoncpp@1.9.5",
      "repoName": "jsoncpp",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "jsoncpp~1.9.5",
          "urls": [
            "https://github.com/open-source-parsers/jsoncpp/archive/refs/tags/1.9.5.tar.gz"
          ],
          "integrity": "sha256-9AmFblkgwY0ML7hSduJO5gfSoJtefV8KNxNokDwnXaI=",
          "strip_prefix": "jsoncpp-1.9.5",
          "remote_patches": {
            "https://bcr.bazel.build/modules/jsoncpp/1.9.5/patches/build_dot_bazel.patch": "sha256-Vj8diXSWps8I8h5cdEqBDYmKBA2ulvWxMZBEQlIgcpU=",
            "https://bcr.bazel.build/modules/jsoncpp/1.9.5/patches/module_dot_bazel.patch": "sha256-7RC7fS8N11vcyeDEaUZ05yBqr0YY7OzuzqaWz5W2XDo="
          },
          "remote_patch_strip": 1
        }
      }
    },
    "rules_jvm_external@5.1": {
      "name": "rules_jvm_external",
      "version": "5.1",
      "key": "rules_jvm_external@5.1",
      "repoName": "rules_jvm_external",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [
        {
          "extensionBzlFile": "@rules_jvm_external//:non-module-deps.bzl",
          "extensionName": "non_module_deps",
          "usingModule": "rules_jvm_external@5.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel",
            "line": 9,
            "column": 32
          },
          "imports": {
            "io_bazel_rules_kotlin": "io_bazel_rules_kotlin"
          },
          "devImports": [],
          "tags": [],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        },
        {
          "extensionBzlFile": ":extensions.bzl",
          "extensionName": "maven",
          "usingModule": "rules_jvm_external@5.1",
          "location": {
            "file": "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel",
            "line": 16,
            "column": 22
          },
          "imports": {
            "rules_jvm_external_deps": "rules_jvm_external_deps"
          },
          "devImports": [],
          "tags": [
            {
              "tagName": "install",
              "attributeValues": {
                "name": "rules_jvm_external_deps",
                "artifacts": [
                  "com.google.auth:google-auth-library-credentials:0.22.0",
                  "com.google.auth:google-auth-library-oauth2-http:0.22.0",
                  "com.google.cloud:google-cloud-core:1.93.10",
                  "com.google.cloud:google-cloud-storage:1.113.4",
                  "com.google.code.gson:gson:2.9.0",
                  "com.google.googlejavaformat:google-java-format:1.15.0",
                  "com.google.guava:guava:31.1-jre",
                  "org.apache.maven:maven-artifact:3.8.6",
                  "software.amazon.awssdk:s3:2.17.183"
                ],
                "lock_file": "@rules_jvm_external//:rules_jvm_external_deps_install.json"
              },
              "devDependency": false,
              "location": {
                "file": "https://bcr.bazel.build/modules/rules_jvm_external/5.1/MODULE.bazel",
                "line": 18,
                "column": 14
              }
            }
          ],
          "hasDevUseExtension": false,
          "hasNonDevUseExtension": true
        }
      ],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "io_bazel_stardoc": "stardoc@0.5.3",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_jvm_external~5.1",
          "urls": [
            "https://github.com/bazelbuild/rules_jvm_external/releases/download/5.1/rules_jvm_external-5.1.tar.gz"
          ],
          "integrity": "sha256-jDsgdyLl+X8cgzEVgqbBHfmSJuZeJHEIbillYeV8yVQ=",
          "strip_prefix": "rules_jvm_external-5.1",
          "remote_patches": {},
          "remote_patch_strip": 0
        }
      }
    },
    "rules_pkg@0.7.0": {
      "name": "rules_pkg",
      "version": "0.7.0",
      "key": "rules_pkg@0.7.0",
      "repoName": "rules_pkg",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "rules_python": "rules_python@0.10.2",
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_license": "rules_license@1.0.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "rules_pkg~0.7.0",
          "urls": [
            "https://github.com/bazelbuild/rules_pkg/releases/download/0.7.0/rules_pkg-0.7.0.tar.gz"
          ],
          "integrity": "sha256-iimOgydi7aGDBZfWT+fbWBeKqEzVkm121bdE1lWJQcI=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/rules_pkg/0.7.0/patches/module_dot_bazel.patch": "sha256-4OaEPZwYF6iC71ZTDg6MJ7LLqX7ZA0/kK4mT+4xKqiE="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "googletest@1.14.0": {
      "name": "googletest",
      "version": "1.14.0",
      "key": "googletest@1.14.0",
      "repoName": "googletest",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "com_google_absl": "abseil-cpp@20230802.0.bcr.1",
        "platforms": "platforms@0.0.10",
        "rules_cc": "rules_cc@0.0.17",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "googletest~1.14.0",
          "urls": [
            "https://github.com/google/googletest/archive/refs/tags/v1.14.0.tar.gz"
          ],
          "integrity": "sha256-itWYxzrXluDYKAsILOvYKmMNc+c808cAV5OKZQG7pdc=",
          "strip_prefix": "googletest-1.14.0",
          "remote_patches": {
            "https://bcr.bazel.build/modules/googletest/1.14.0/patches/module_dot_bazel.patch": "sha256-CSomzvti38LCuURDG5EEoa3O1tQF3cKKt/mknnP1qcc="
          },
          "remote_patch_strip": 0
        }
      }
    },
    "stardoc@0.5.3": {
      "name": "stardoc",
      "version": "0.5.3",
      "key": "stardoc@0.5.3",
      "repoName": "stardoc",
      "executionPlatformsToRegister": [],
      "toolchainsToRegister": [],
      "extensionUsages": [],
      "deps": {
        "bazel_skylib": "bazel_skylib@1.7.1",
        "rules_java": "rules_java@7.1.0",
        "bazel_tools": "bazel_tools@_",
        "local_config_platform": "local_config_platform@_"
      },
      "repoSpec": {
        "bzlFile": "@bazel_tools//tools/build_defs/repo:http.bzl",
        "ruleClassName": "http_archive",
        "attributes": {
          "name": "stardoc~0.5.3",
          "urls": [
            "https://github.com/bazelbuild/stardoc/releases/download/0.5.3/stardoc-0.5.3.tar.gz"
          ],
          "integrity": "sha256-P9j+xN3sPGcL2BCQTi4zFwvt/hL5Ct+UNQgYS+RYyLs=",
          "strip_prefix": "",
          "remote_patches": {
            "https://bcr.bazel.build/modules/stardoc/0.5.3/patches/module_dot_bazel.patch": "sha256-Lgpy9OCr0zBWYuHoyM1rJJrgxn23X/bwgICEF7XiEug="
          },
          "remote_patch_strip": 0
        }
      }
    }
  },
  "moduleExtensions": {
    "@@apple_support~1.17.1//crosstool:setup.bzl%apple_cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "nmI+jH68WCPEuYoWwu2YM1GmgYiCH3z4taOt9WVdAU0=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_apple_cc": {
            "bzlFile": "@@apple_support~1.17.1//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf",
            "attributes": {
              "name": "apple_support~1.17.1~apple_cc_configure_extension~local_config_apple_cc"
            }
          },
          "local_config_apple_cc_toolchains": {
            "bzlFile": "@@apple_support~1.17.1//crosstool:setup.bzl",
            "ruleClassName": "_apple_cc_autoconf_toolchains",
            "attributes": {
              "name": "apple_support~1.17.1~apple_cc_configure_extension~local_config_apple_cc_toolchains"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "apple_support~1.17.1",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@bazel_features~1.21.0//private:extensions.bzl%version_extension": {
      "general": {
        "bzlTransitiveDigest": "3/tbazSKxUvJSvyKzZ8L44aPHzkSWT+laLD1XhHQxM0=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "bazel_features_version": {
            "bzlFile": "@@bazel_features~1.21.0//private:version_repo.bzl",
            "ruleClassName": "version_repo",
            "attributes": {
              "name": "bazel_features~1.21.0~version_extension~bazel_features_version"
            }
          },
          "bazel_features_globals": {
            "bzlFile": "@@bazel_features~1.21.0//private:globals_repo.bzl",
            "ruleClassName": "globals_repo",
            "attributes": {
              "name": "bazel_features~1.21.0~version_extension~bazel_features_globals",
              "globals": {
                "CcSharedLibraryInfo": "6.0.0-pre.20220630.1",
                "CcSharedLibraryHintInfo": "7.0.0-pre.20230316.2",
                "PackageSpecificationInfo": "6.4.0",
                "RunEnvironmentInfo": "5.3.0",
                "DefaultInfo": "0.0.1",
                "__TestingOnly_NeverAvailable": "1000000000.0.0"
              },
              "legacy_globals": {
                "JavaInfo": "8.0.0",
                "JavaPluginInfo": "8.0.0",
                "ProtoInfo": "8.0.0",
                "PyCcLinkParamsProvider": "8.0.0",
                "PyInfo": "8.0.0",
                "PyRuntimeInfo": "8.0.0"
              }
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "DEV"
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.21.0",
            "bazel_skylib",
            "bazel_skylib~1.7.1"
          ],
          [
            "bazel_features~1.21.0",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@bazel_tools//tools/cpp:cc_configure.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "mcsWHq3xORJexV5/4eCvNOLxFOQKV6eli3fkr+tEaqE=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@bazel_tools//tools/cpp:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "bazel_tools~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_tools",
            "bazel_tools",
            "bazel_tools"
          ]
        ]
      }
    },
    "@@bazel_tools//tools/osx:xcode_configure.bzl%xcode_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "Qh2bWTU6QW6wkrd87qrU4YeY+SG37Nvw3A0PR4Y0L2Y=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_xcode": {
            "bzlFile": "@@bazel_tools//tools/osx:xcode_configure.bzl",
            "ruleClassName": "xcode_autoconf",
            "attributes": {
              "name": "bazel_tools~xcode_configure_extension~local_config_xcode",
              "xcode_locator": "@bazel_tools//tools/osx:xcode_locator.m",
              "remote_xcode": ""
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@bazel_tools//tools/sh:sh_configure.bzl%sh_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "hp4NgmNjEg5+xgvzfh6L83bt9/aiiWETuNpwNuF1MSU=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_sh": {
            "bzlFile": "@@bazel_tools//tools/sh:sh_configure.bzl",
            "ruleClassName": "sh_config",
            "attributes": {
              "name": "bazel_tools~sh_configure_extension~local_config_sh"
            }
          }
        },
        "recordedRepoMappingEntries": []
      }
    },
    "@@rules_cc~0.0.17//cc:extensions.bzl%cc_configure_extension": {
      "general": {
        "bzlTransitiveDigest": "XUs6TX+CDbkP5HK9iqFd7ojvbVZPQ3LiPhYja6CChWQ=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_cc": {
            "bzlFile": "@@rules_cc~0.0.17//cc/private/toolchain:cc_configure.bzl",
            "ruleClassName": "cc_autoconf",
            "attributes": {
              "name": "rules_cc~0.0.17~cc_configure_extension~local_config_cc"
            }
          },
          "local_config_cc_toolchains": {
            "bzlFile": "@@rules_cc~0.0.17//cc/private/toolchain:cc_configure.bzl",
            "ruleClassName": "cc_autoconf_toolchains",
            "attributes": {
              "name": "rules_cc~0.0.17~cc_configure_extension~local_config_cc_toolchains"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.21.0",
            "bazel_features_globals",
            "bazel_features~1.21.0~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.21.0",
            "bazel_features_version",
            "bazel_features~1.21.0~version_extension~bazel_features_version"
          ],
          [
            "rules_cc~0.0.17",
            "bazel_features",
            "bazel_features~1.21.0"
          ]
        ]
      }
    },
    "@@rules_java~7.1.0//java:extensions.bzl%toolchains": {
      "general": {
        "bzlTransitiveDigest": "D02GmifxnV/IhYgspsJMDZ/aE8HxAjXgek5gi6FSto4=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "remotejdk21_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk21_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "2a7a99a3ea263dbd8d32a67d1e6e363ba8b25c645c826f5e167a02bbafaff1fa",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "314b04568ec0ae9b36ba03c9cbd42adc9e1265f74678923b19297d66eb84dcca",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remote_java_tools_windows": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_windows",
              "sha256": "c5c70c214a350f12cbf52da8270fa43ba629b795f3dd328028a38f8f0d39c2a1",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_windows-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_windows-v13.1.zip"
              ]
            }
          },
          "remotejdk11_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "43408193ce2fa0862819495b5ae8541085b95660153f2adcf91a52d3a1710e83",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-win_x64.zip"
              ]
            }
          },
          "remotejdk11_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "54174439f2b3fddd11f1048c397fe7bb45d4c9d66d452d6889b013d04d21c4de",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "b9482f2304a1a68a614dfacddcf29569a72f0fac32e6c74f83dc1b9a157b8340",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_s390x_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:s390x\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_s390x//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux//:jdk\",\n)\n"
            }
          },
          "remotejdk11_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "bcaab11cfe586fae7583c6d9d311c64384354fb2638eb9a012eca4c3f1a1d9fd",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "b8a28e6e767d90acf793ea6f5bed0bb595ba0ba5ebdf8b99f395266161e53ec2",
              "strip_prefix": "jdk-11.0.13+8",
              "urls": [
                "https://mirror.bazel.build/aka.ms/download-jdk/microsoft-jdk-11.0.13.8.1-windows-aarch64.zip"
              ]
            }
          },
          "remotejdk17_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "640453e8afe8ffe0fb4dceb4535fb50db9c283c64665eebb0ba68b19e65f4b1f",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "9639b87db586d0c89f7a9892ae47f421e442c64b97baebdff31788fbe23265bd",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-macosx_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-macosx_x64.tar.gz"
              ]
            }
          },
          "remotejdk21_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "192f2afca57701de6ec496234f7e45d971bf623ff66b8ee4a5c81582054e5637",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_x64.zip"
              ]
            }
          },
          "remotejdk11_macos_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk21_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "0c0eadfbdc47a7ca64aeab51b9c061f71b6e4d25d2d87674512e9b6387e9e3a6",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_x64.tar.gz"
              ]
            }
          },
          "remote_java_tools_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_linux",
              "sha256": "d134da9b04c9023fb6e56a5d4bffccee73f7bc9572ddc4e747778dacccd7a5a7",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_linux-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_linux-v13.1.zip"
              ]
            }
          },
          "remotejdk21_win": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_win",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "e9959d500a0d9a7694ac243baf657761479da132f0f94720cbffd092150bd802",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-win_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-win_x64.zip"
              ]
            }
          },
          "remotejdk21_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 21,\n)\n",
              "sha256": "1fb64b8036c5d463d8ab59af06bf5b6b006811e6012e3b0eb6bccf57f1c55835",
              "strip_prefix": "zulu21.28.85-ca-jdk21.0.0-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu21.28.85-ca-jdk21.0.0-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk11_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_s390x",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a58fc0361966af0a5d5a31a2d8a208e3c9bb0f54f345596fd80b99ea9a39788b",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz",
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_s390x_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk17_linux_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "6531cef61e416d5a7b691555c8cf2bdff689201b8a001ff45ab6740062b44313",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-linux_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk17_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win_arm64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a34b404f87a08a61148b38e1416d837189e1df7a040d949e743633daf4695a3c",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-linux_x64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-linux_x64.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:macos\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_macos//:jdk\",\n)\n"
            }
          },
          "remotejdk17_linux_ppc64le_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:ppc\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_linux_ppc64le//:jdk\",\n)\n"
            }
          },
          "remotejdk17_win_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_arm64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "6802c99eae0d788e21f52d03cab2e2b3bf42bc334ca03cbf19f71eb70ee19f85",
              "strip_prefix": "zulu17.44.53-ca-jdk17.0.8.1-win_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip",
                "https://cdn.azul.com/zulu/bin/zulu17.44.53-ca-jdk17.0.8.1-win_aarch64.zip"
              ]
            }
          },
          "remote_java_tools_darwin_arm64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_arm64",
              "sha256": "dab5bb87ec43e980faea6e1cec14bafb217b8e2f5346f53aa784fd715929a930",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_arm64-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_arm64-v13.1.zip"
              ]
            }
          },
          "remotejdk17_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "00a4c07603d0218cd678461b5b3b7e25b3253102da4022d31fc35907f21a2efd",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_ppc64le_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk21_linux_aarch64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_linux_aarch64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:linux\", \"@platforms//cpu:aarch64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_linux_aarch64//:jdk\",\n)\n"
            }
          },
          "remotejdk11_win_arm64_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_win_arm64_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_11\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"11\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:arm64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk11_win_arm64//:jdk\",\n)\n"
            }
          },
          "local_jdk": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:local_java_repository.bzl",
            "ruleClassName": "_local_java_repository_rule",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~local_jdk",
              "java_home": "",
              "version": "",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = {RUNTIME_VERSION},\n)\n"
            }
          },
          "remote_java_tools_darwin_x86_64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools_darwin_x86_64",
              "sha256": "0db40d8505a2b65ef0ed46e4256757807db8162f7acff16225be57c1d5726dbc",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools_darwin_x86_64-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools_darwin_x86_64-v13.1.zip"
              ]
            }
          },
          "remote_java_tools": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remote_java_tools",
              "sha256": "286bdbbd66e616fc4ed3f90101418729a73baa7e8c23a98ffbef558f74c0ad14",
              "urls": [
                "https://mirror.bazel.build/bazel_java_tools/releases/java/v13.1/java_tools-v13.1.zip",
                "https://github.com/bazelbuild/java_tools/releases/download/java_v13.1/java_tools-v13.1.zip"
              ]
            }
          },
          "remotejdk17_linux_s390x": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_linux_s390x",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 17,\n)\n",
              "sha256": "ffacba69c6843d7ca70d572489d6cc7ab7ae52c60f0852cedf4cf0d248b6fc37",
              "strip_prefix": "jdk-17.0.8.1+1",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz",
                "https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.8.1%2B1/OpenJDK17U-jdk_s390x_linux_hotspot_17.0.8.1_1.tar.gz"
              ]
            }
          },
          "remotejdk17_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk17_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_17\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"17\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk17_win//:jdk\",\n)\n"
            }
          },
          "remotejdk11_linux_ppc64le": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_linux_ppc64le",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "a8fba686f6eb8ae1d1a9566821dbd5a85a1108b96ad857fdbac5c1e4649fc56f",
              "strip_prefix": "jdk-11.0.15+10",
              "urls": [
                "https://mirror.bazel.build/github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz",
                "https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.15+10/OpenJDK11U-jdk_ppc64le_linux_hotspot_11.0.15_10.tar.gz"
              ]
            }
          },
          "remotejdk11_macos_aarch64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk11_macos_aarch64",
              "build_file_content": "load(\"@rules_java//java:defs.bzl\", \"java_runtime\")\n\npackage(default_visibility = [\"//visibility:public\"])\n\nexports_files([\"WORKSPACE\", \"BUILD.bazel\"])\n\nfilegroup(\n    name = \"jre\",\n    srcs = glob(\n        [\n            \"jre/bin/**\",\n            \"jre/lib/**\",\n        ],\n        allow_empty = True,\n        # In some configurations, Java browser plugin is considered harmful and\n        # common antivirus software blocks access to npjp2.dll interfering with Bazel,\n        # so do not include it in JRE on Windows.\n        exclude = [\"jre/bin/plugin2/**\"],\n    ),\n)\n\nfilegroup(\n    name = \"jdk-bin\",\n    srcs = glob(\n        [\"bin/**\"],\n        # The JDK on Windows sometimes contains a directory called\n        # \"%systemroot%\", which is not a valid label.\n        exclude = [\"**/*%*/**\"],\n    ),\n)\n\n# This folder holds security policies.\nfilegroup(\n    name = \"jdk-conf\",\n    srcs = glob(\n        [\"conf/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-include\",\n    srcs = glob(\n        [\"include/**\"],\n        allow_empty = True,\n    ),\n)\n\nfilegroup(\n    name = \"jdk-lib\",\n    srcs = glob(\n        [\"lib/**\", \"release\"],\n        allow_empty = True,\n        exclude = [\n            \"lib/missioncontrol/**\",\n            \"lib/visualvm/**\",\n        ],\n    ),\n)\n\njava_runtime(\n    name = \"jdk\",\n    srcs = [\n        \":jdk-bin\",\n        \":jdk-conf\",\n        \":jdk-include\",\n        \":jdk-lib\",\n        \":jre\",\n    ],\n    # Provide the 'java` binary explicitly so that the correct path is used by\n    # Bazel even when the host platform differs from the execution platform.\n    # Exactly one of the two globs will be empty depending on the host platform.\n    # When --incompatible_disallow_empty_glob is enabled, each individual empty\n    # glob will fail without allow_empty = True, even if the overall result is\n    # non-empty.\n    java = glob([\"bin/java.exe\", \"bin/java\"], allow_empty = True)[0],\n    version = 11,\n)\n",
              "sha256": "7632bc29f8a4b7d492b93f3bc75a7b61630894db85d136456035ab2a24d38885",
              "strip_prefix": "zulu11.66.15-ca-jdk11.0.20-macosx_aarch64",
              "urls": [
                "https://mirror.bazel.build/cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz",
                "https://cdn.azul.com/zulu/bin/zulu11.66.15-ca-jdk11.0.20-macosx_aarch64.tar.gz"
              ]
            }
          },
          "remotejdk21_win_toolchain_config_repo": {
            "bzlFile": "@@rules_java~7.1.0//toolchains:remote_java_repository.bzl",
            "ruleClassName": "_toolchain_config",
            "attributes": {
              "name": "rules_java~7.1.0~toolchains~remotejdk21_win_toolchain_config_repo",
              "build_file": "\nconfig_setting(\n    name = \"prefix_version_setting\",\n    values = {\"java_runtime_version\": \"remotejdk_21\"},\n    visibility = [\"//visibility:private\"],\n)\nconfig_setting(\n    name = \"version_setting\",\n    values = {\"java_runtime_version\": \"21\"},\n    visibility = [\"//visibility:private\"],\n)\nalias(\n    name = \"version_or_prefix_version_setting\",\n    actual = select({\n        \":version_setting\": \":version_setting\",\n        \"//conditions:default\": \":prefix_version_setting\",\n    }),\n    visibility = [\"//visibility:private\"],\n)\ntoolchain(\n    name = \"toolchain\",\n    target_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\ntoolchain(\n    name = \"bootstrap_runtime_toolchain\",\n    # These constraints are not required for correctness, but prevent fetches of remote JDK for\n    # different architectures. As every Java compilation toolchain depends on a bootstrap runtime in\n    # the same configuration, this constraint will not result in toolchain resolution failures.\n    exec_compatible_with = [\"@platforms//os:windows\", \"@platforms//cpu:x86_64\"],\n    target_settings = [\":version_or_prefix_version_setting\"],\n    toolchain_type = \"@bazel_tools//tools/jdk:bootstrap_runtime_toolchain_type\",\n    toolchain = \"@remotejdk21_win//:jdk\",\n)\n"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "rules_java~7.1.0",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_java~7.1.0",
            "remote_java_tools",
            "rules_java~7.1.0~toolchains~remote_java_tools"
          ]
        ]
      }
    },
    "@@rules_rust~0.56.0//rust:extensions.bzl%rust": {
      "general": {
        "bzlTransitiveDigest": "2DI1cxhm4zk2FfPqM3pyNmF/voSB4eF33PHgek+kUaQ=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "rw-1196008214": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1196008214",
              "toolchain": "@rw-1196008214_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rust_freebsd_x86_64__wasm32-unknown-unknown__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64__wasm32-unknown-unknown__stable_tools",
              "exec_triple": "x86_64-unknown-freebsd",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64__aarch64-unknown-linux-gnu__stable_tools",
              "exec_triple": "aarch64-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "aarch64-unknown-linux-gnu",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64__aarch64-unknown-linux-gnu__stable",
              "toolchain": "@rust_linux_aarch64__aarch64-unknown-linux-gnu__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:linux"
              ]
            }
          },
          "rustfmt_nightly-2024-11-28__aarch64-apple-darwin_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__aarch64-apple-darwin_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "aarch64-apple-darwin"
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "x86_64-unknown-freebsd"
            }
          },
          "rust_windows_x86_64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_windows_x86_64",
              "toolchains": [
                "@rw-1704990954//:toolchain",
                "@rw-72459030//:toolchain",
                "@rw-1656419016//:toolchain"
              ]
            }
          },
          "rust_linux_aarch64__wasm32-unknown-unknown__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64__wasm32-unknown-unknown__stable",
              "toolchain": "@rust_linux_aarch64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rust_linux_s390x__wasm32-unknown-unknown__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x__wasm32-unknown-unknown__stable",
              "toolchain": "@rust_linux_s390x__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:s390x",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rw-1757606600": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1757606600",
              "toolchain": "@rw-1757606600_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64__x86_64-unknown-linux-gnu__stable_tools",
              "exec_triple": "x86_64-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "x86_64-unknown-linux-gnu",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu",
              "toolchain": "@rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": []
            }
          },
          "rust_windows_aarch64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_windows_aarch64",
              "toolchains": [
                "@rw-852503484//:toolchain",
                "@rw-1196008214//:toolchain",
                "@rw-1757606600//:toolchain"
              ]
            }
          },
          "rust_linux_aarch64__wasm32-wasip1__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64__wasm32-wasip1__stable_tools",
              "exec_triple": "aarch64-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_x86_64__wasm32-unknown-unknown__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64__wasm32-unknown-unknown__stable",
              "toolchain": "@rust_linux_x86_64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rw-1656419016_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1656419016_tools",
              "exec_triple": "x86_64-pc-windows-msvc",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rw-852503484_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-852503484_tools",
              "exec_triple": "aarch64-pc-windows-msvc",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "aarch64-pc-windows-msvc",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_x86_64__wasm32-wasip1__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64__wasm32-wasip1__stable",
              "toolchain": "@rust_darwin_x86_64__wasm32-wasip1__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "x86_64-unknown-linux-gnu"
            }
          },
          "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64__x86_64-unknown-freebsd__stable_tools",
              "exec_triple": "x86_64-unknown-freebsd",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "x86_64-unknown-freebsd",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_x86_64__wasm32-unknown-unknown__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64__wasm32-unknown-unknown__stable",
              "toolchain": "@rust_darwin_x86_64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rust_linux_x86_64__wasm32-wasip1__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64__wasm32-wasip1__stable",
              "toolchain": "@rust_linux_x86_64__wasm32-wasip1__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rust_darwin_aarch64__wasm32-unknown-unknown__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64__wasm32-unknown-unknown__stable",
              "toolchain": "@rust_darwin_aarch64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rust_darwin_aarch64__aarch64-apple-darwin__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64__aarch64-apple-darwin__stable",
              "toolchain": "@rust_darwin_aarch64__aarch64-apple-darwin__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:osx"
              ]
            }
          },
          "rust_darwin_x86_64__wasm32-wasip1__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64__wasm32-wasip1__stable_tools",
              "exec_triple": "x86_64-apple-darwin",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rw-1757606600_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1757606600_tools",
              "exec_triple": "aarch64-pc-windows-msvc",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_x86_64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64",
              "toolchains": [
                "@rust_darwin_x86_64__x86_64-apple-darwin__stable//:toolchain",
                "@rust_darwin_x86_64__wasm32-unknown-unknown__stable//:toolchain",
                "@rust_darwin_x86_64__wasm32-wasip1__stable//:toolchain"
              ]
            }
          },
          "rw-72459030_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-72459030_tools",
              "exec_triple": "x86_64-pc-windows-msvc",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "aarch64-pc-windows-msvc"
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-apple-darwin": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-apple-darwin",
              "toolchain": "@rustfmt_nightly-2024-11-28__x86_64-apple-darwin_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": []
            }
          },
          "rust_linux_s390x": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x",
              "toolchains": [
                "@rust_linux_s390x__s390x-unknown-linux-gnu__stable//:toolchain",
                "@rust_linux_s390x__wasm32-unknown-unknown__stable//:toolchain",
                "@rust_linux_s390x__wasm32-wasip1__stable//:toolchain"
              ]
            }
          },
          "rust_darwin_x86_64__wasm32-unknown-unknown__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64__wasm32-unknown-unknown__stable_tools",
              "exec_triple": "x86_64-apple-darwin",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_aarch64__wasm32-unknown-unknown__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64__wasm32-unknown-unknown__stable_tools",
              "exec_triple": "aarch64-apple-darwin",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_aarch64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64",
              "toolchains": [
                "@rust_darwin_aarch64__aarch64-apple-darwin__stable//:toolchain",
                "@rust_darwin_aarch64__wasm32-unknown-unknown__stable//:toolchain",
                "@rust_darwin_aarch64__wasm32-wasip1__stable//:toolchain"
              ]
            }
          },
          "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "s390x-unknown-linux-gnu"
            }
          },
          "rust_analyzer_1.75.0": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_analyzer_1.75.0",
              "toolchain": "@rust_analyzer_1.75.0_tools//:rust_analyzer_toolchain",
              "toolchain_type": "@rules_rust//rust/rust_analyzer:toolchain_type",
              "exec_compatible_with": [],
              "target_compatible_with": []
            }
          },
          "rust_freebsd_x86_64__wasm32-wasip1__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64__wasm32-wasip1__stable_tools",
              "exec_triple": "x86_64-unknown-freebsd",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_x86_64__x86_64-apple-darwin__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64__x86_64-apple-darwin__stable",
              "toolchain": "@rust_darwin_x86_64__x86_64-apple-darwin__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:osx"
              ]
            }
          },
          "rust_linux_x86_64__wasm32-unknown-unknown__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64__wasm32-unknown-unknown__stable_tools",
              "exec_triple": "x86_64-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_aarch64__wasm32-wasip1__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64__wasm32-wasip1__stable",
              "toolchain": "@rust_linux_aarch64__wasm32-wasip1__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rw-72459030": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-72459030",
              "toolchain": "@rw-72459030_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rust_freebsd_x86_64__wasm32-unknown-unknown__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64__wasm32-unknown-unknown__stable",
              "toolchain": "@rust_freebsd_x86_64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:freebsd"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:none"
              ]
            }
          },
          "rust_freebsd_x86_64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64",
              "toolchains": [
                "@rust_freebsd_x86_64__x86_64-unknown-freebsd__stable//:toolchain",
                "@rust_freebsd_x86_64__wasm32-unknown-unknown__stable//:toolchain",
                "@rust_freebsd_x86_64__wasm32-wasip1__stable//:toolchain"
              ]
            }
          },
          "rust_darwin_aarch64__wasm32-wasip1__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64__wasm32-wasip1__stable",
              "toolchain": "@rust_darwin_aarch64__wasm32-wasip1__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64__x86_64-unknown-linux-gnu__stable",
              "toolchain": "@rust_linux_x86_64__x86_64-unknown-linux-gnu__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:linux"
              ]
            }
          },
          "rw-1704990954_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1704990954_tools",
              "exec_triple": "x86_64-pc-windows-msvc",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "x86_64-pc-windows-msvc",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_x86_64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64",
              "toolchains": [
                "@rust_linux_x86_64__x86_64-unknown-linux-gnu__stable//:toolchain",
                "@rust_linux_x86_64__wasm32-unknown-unknown__stable//:toolchain",
                "@rust_linux_x86_64__wasm32-wasip1__stable//:toolchain"
              ]
            }
          },
          "rw-852503484": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-852503484",
              "toolchain": "@rw-852503484_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:windows"
              ]
            }
          },
          "rust_linux_x86_64__wasm32-wasip1__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_x86_64__wasm32-wasip1__stable_tools",
              "exec_triple": "x86_64-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_s390x__s390x-unknown-linux-gnu__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x__s390x-unknown-linux-gnu__stable",
              "toolchain": "@rust_linux_s390x__s390x-unknown-linux-gnu__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:s390x",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:s390x",
                "@platforms//os:linux"
              ]
            }
          },
          "rust_linux_s390x__wasm32-wasip1__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x__wasm32-wasip1__stable_tools",
              "exec_triple": "s390x-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu",
              "toolchain": "@rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:s390x",
                "@platforms//os:linux"
              ],
              "target_compatible_with": []
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd",
              "toolchain": "@rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:freebsd"
              ],
              "target_compatible_with": []
            }
          },
          "rust_darwin_aarch64__aarch64-apple-darwin__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64__aarch64-apple-darwin__stable_tools",
              "exec_triple": "aarch64-apple-darwin",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "aarch64-apple-darwin",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_s390x__s390x-unknown-linux-gnu__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x__s390x-unknown-linux-gnu__stable_tools",
              "exec_triple": "s390x-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "s390x-unknown-linux-gnu",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rw-1656419016": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1656419016",
              "toolchain": "@rw-1656419016_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc",
              "toolchain": "@rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": []
            }
          },
          "rw-1196008214_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1196008214_tools",
              "exec_triple": "aarch64-pc-windows-msvc",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_s390x__wasm32-unknown-unknown__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x__wasm32-unknown-unknown__stable_tools",
              "exec_triple": "s390x-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_analyzer_1.75.0_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_analyzer_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_analyzer_1.75.0_tools",
              "version": "1.75.0",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_linux_s390x__wasm32-wasip1__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_s390x__wasm32-wasip1__stable",
              "toolchain": "@rust_linux_s390x__wasm32-wasip1__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:s390x",
                "@platforms//os:linux"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rust_linux_aarch64": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_set_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64",
              "toolchains": [
                "@rust_linux_aarch64__aarch64-unknown-linux-gnu__stable//:toolchain",
                "@rust_linux_aarch64__wasm32-unknown-unknown__stable//:toolchain",
                "@rust_linux_aarch64__wasm32-wasip1__stable//:toolchain"
              ]
            }
          },
          "rust_darwin_aarch64__wasm32-wasip1__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_aarch64__wasm32-wasip1__stable_tools",
              "exec_triple": "aarch64-apple-darwin",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-wasip1",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "x86_64-pc-windows-msvc"
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-apple-darwin_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-apple-darwin_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "x86_64-apple-darwin"
            }
          },
          "rw-1704990954": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rw-1704990954",
              "toolchain": "@rw-1704990954_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:windows"
              ]
            }
          },
          "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rustfmt_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu_tools",
              "version": "nightly/2024-11-28",
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": {},
              "exec_triple": "aarch64-unknown-linux-gnu"
            }
          },
          "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc",
              "toolchain": "@rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:windows"
              ],
              "target_compatible_with": []
            }
          },
          "rustfmt_nightly-2024-11-28__aarch64-apple-darwin": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__aarch64-apple-darwin",
              "toolchain": "@rustfmt_nightly-2024-11-28__aarch64-apple-darwin_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:osx"
              ],
              "target_compatible_with": []
            }
          },
          "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64__x86_64-unknown-freebsd__stable",
              "toolchain": "@rust_freebsd_x86_64__x86_64-unknown-freebsd__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:freebsd"
              ],
              "target_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:freebsd"
              ]
            }
          },
          "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu",
              "toolchain": "@rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu_tools//:rustfmt_toolchain",
              "toolchain_type": "@rules_rust//rust/rustfmt:toolchain_type",
              "target_settings": [],
              "exec_compatible_with": [
                "@platforms//cpu:aarch64",
                "@platforms//os:linux"
              ],
              "target_compatible_with": []
            }
          },
          "rust_freebsd_x86_64__wasm32-wasip1__stable": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "toolchain_repository_proxy",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_freebsd_x86_64__wasm32-wasip1__stable",
              "toolchain": "@rust_freebsd_x86_64__wasm32-wasip1__stable_tools//:rust_toolchain",
              "target_settings": [
                "@rules_rust//rust/toolchain/channel:stable"
              ],
              "toolchain_type": "@rules_rust//rust:toolchain",
              "exec_compatible_with": [
                "@platforms//cpu:x86_64",
                "@platforms//os:freebsd"
              ],
              "target_compatible_with": [
                "@platforms//cpu:wasm32",
                "@platforms//os:wasi"
              ]
            }
          },
          "rust_toolchains": {
            "bzlFile": "@@rules_rust~0.56.0//rust/private:repository_utils.bzl",
            "ruleClassName": "toolchain_repository_hub",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_toolchains",
              "toolchain_names": [
                "rust_analyzer_1.75.0",
                "rust_darwin_aarch64__aarch64-apple-darwin__stable",
                "rust_darwin_aarch64__wasm32-unknown-unknown__stable",
                "rust_darwin_aarch64__wasm32-wasip1__stable",
                "rw-852503484",
                "rw-1196008214",
                "rw-1757606600",
                "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable",
                "rust_linux_aarch64__wasm32-unknown-unknown__stable",
                "rust_linux_aarch64__wasm32-wasip1__stable",
                "rust_linux_s390x__s390x-unknown-linux-gnu__stable",
                "rust_linux_s390x__wasm32-unknown-unknown__stable",
                "rust_linux_s390x__wasm32-wasip1__stable",
                "rust_darwin_x86_64__x86_64-apple-darwin__stable",
                "rust_darwin_x86_64__wasm32-unknown-unknown__stable",
                "rust_darwin_x86_64__wasm32-wasip1__stable",
                "rw-1704990954",
                "rw-72459030",
                "rw-1656419016",
                "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable",
                "rust_freebsd_x86_64__wasm32-unknown-unknown__stable",
                "rust_freebsd_x86_64__wasm32-wasip1__stable",
                "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable",
                "rust_linux_x86_64__wasm32-unknown-unknown__stable",
                "rust_linux_x86_64__wasm32-wasip1__stable",
                "rustfmt_nightly-2024-11-28__aarch64-apple-darwin",
                "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc",
                "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu",
                "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu",
                "rustfmt_nightly-2024-11-28__x86_64-apple-darwin",
                "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc",
                "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd",
                "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu"
              ],
              "toolchain_labels": {
                "rust_analyzer_1.75.0": "@rust_analyzer_1.75.0_tools//:rust_analyzer_toolchain",
                "rust_darwin_aarch64__aarch64-apple-darwin__stable": "@rust_darwin_aarch64__aarch64-apple-darwin__stable_tools//:rust_toolchain",
                "rust_darwin_aarch64__wasm32-unknown-unknown__stable": "@rust_darwin_aarch64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
                "rust_darwin_aarch64__wasm32-wasip1__stable": "@rust_darwin_aarch64__wasm32-wasip1__stable_tools//:rust_toolchain",
                "rw-852503484": "@rw-852503484_tools//:rust_toolchain",
                "rw-1196008214": "@rw-1196008214_tools//:rust_toolchain",
                "rw-1757606600": "@rw-1757606600_tools//:rust_toolchain",
                "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable": "@rust_linux_aarch64__aarch64-unknown-linux-gnu__stable_tools//:rust_toolchain",
                "rust_linux_aarch64__wasm32-unknown-unknown__stable": "@rust_linux_aarch64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
                "rust_linux_aarch64__wasm32-wasip1__stable": "@rust_linux_aarch64__wasm32-wasip1__stable_tools//:rust_toolchain",
                "rust_linux_s390x__s390x-unknown-linux-gnu__stable": "@rust_linux_s390x__s390x-unknown-linux-gnu__stable_tools//:rust_toolchain",
                "rust_linux_s390x__wasm32-unknown-unknown__stable": "@rust_linux_s390x__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
                "rust_linux_s390x__wasm32-wasip1__stable": "@rust_linux_s390x__wasm32-wasip1__stable_tools//:rust_toolchain",
                "rust_darwin_x86_64__x86_64-apple-darwin__stable": "@rust_darwin_x86_64__x86_64-apple-darwin__stable_tools//:rust_toolchain",
                "rust_darwin_x86_64__wasm32-unknown-unknown__stable": "@rust_darwin_x86_64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
                "rust_darwin_x86_64__wasm32-wasip1__stable": "@rust_darwin_x86_64__wasm32-wasip1__stable_tools//:rust_toolchain",
                "rw-1704990954": "@rw-1704990954_tools//:rust_toolchain",
                "rw-72459030": "@rw-72459030_tools//:rust_toolchain",
                "rw-1656419016": "@rw-1656419016_tools//:rust_toolchain",
                "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable": "@rust_freebsd_x86_64__x86_64-unknown-freebsd__stable_tools//:rust_toolchain",
                "rust_freebsd_x86_64__wasm32-unknown-unknown__stable": "@rust_freebsd_x86_64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
                "rust_freebsd_x86_64__wasm32-wasip1__stable": "@rust_freebsd_x86_64__wasm32-wasip1__stable_tools//:rust_toolchain",
                "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable": "@rust_linux_x86_64__x86_64-unknown-linux-gnu__stable_tools//:rust_toolchain",
                "rust_linux_x86_64__wasm32-unknown-unknown__stable": "@rust_linux_x86_64__wasm32-unknown-unknown__stable_tools//:rust_toolchain",
                "rust_linux_x86_64__wasm32-wasip1__stable": "@rust_linux_x86_64__wasm32-wasip1__stable_tools//:rust_toolchain",
                "rustfmt_nightly-2024-11-28__aarch64-apple-darwin": "@rustfmt_nightly-2024-11-28__aarch64-apple-darwin_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc": "@rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu": "@rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu": "@rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__x86_64-apple-darwin": "@rustfmt_nightly-2024-11-28__x86_64-apple-darwin_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc": "@rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd": "@rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd_tools//:rustfmt_toolchain",
                "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu": "@rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu_tools//:rustfmt_toolchain"
              },
              "toolchain_types": {
                "rust_analyzer_1.75.0": "@rules_rust//rust/rust_analyzer:toolchain_type",
                "rust_darwin_aarch64__aarch64-apple-darwin__stable": "@rules_rust//rust:toolchain",
                "rust_darwin_aarch64__wasm32-unknown-unknown__stable": "@rules_rust//rust:toolchain",
                "rust_darwin_aarch64__wasm32-wasip1__stable": "@rules_rust//rust:toolchain",
                "rw-852503484": "@rules_rust//rust:toolchain",
                "rw-1196008214": "@rules_rust//rust:toolchain",
                "rw-1757606600": "@rules_rust//rust:toolchain",
                "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable": "@rules_rust//rust:toolchain",
                "rust_linux_aarch64__wasm32-unknown-unknown__stable": "@rules_rust//rust:toolchain",
                "rust_linux_aarch64__wasm32-wasip1__stable": "@rules_rust//rust:toolchain",
                "rust_linux_s390x__s390x-unknown-linux-gnu__stable": "@rules_rust//rust:toolchain",
                "rust_linux_s390x__wasm32-unknown-unknown__stable": "@rules_rust//rust:toolchain",
                "rust_linux_s390x__wasm32-wasip1__stable": "@rules_rust//rust:toolchain",
                "rust_darwin_x86_64__x86_64-apple-darwin__stable": "@rules_rust//rust:toolchain",
                "rust_darwin_x86_64__wasm32-unknown-unknown__stable": "@rules_rust//rust:toolchain",
                "rust_darwin_x86_64__wasm32-wasip1__stable": "@rules_rust//rust:toolchain",
                "rw-1704990954": "@rules_rust//rust:toolchain",
                "rw-72459030": "@rules_rust//rust:toolchain",
                "rw-1656419016": "@rules_rust//rust:toolchain",
                "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable": "@rules_rust//rust:toolchain",
                "rust_freebsd_x86_64__wasm32-unknown-unknown__stable": "@rules_rust//rust:toolchain",
                "rust_freebsd_x86_64__wasm32-wasip1__stable": "@rules_rust//rust:toolchain",
                "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable": "@rules_rust//rust:toolchain",
                "rust_linux_x86_64__wasm32-unknown-unknown__stable": "@rules_rust//rust:toolchain",
                "rust_linux_x86_64__wasm32-wasip1__stable": "@rules_rust//rust:toolchain",
                "rustfmt_nightly-2024-11-28__aarch64-apple-darwin": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__x86_64-apple-darwin": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd": "@rules_rust//rust/rustfmt:toolchain_type",
                "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu": "@rules_rust//rust/rustfmt:toolchain_type"
              },
              "target_settings": {
                "rust_darwin_aarch64__aarch64-apple-darwin__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_darwin_aarch64__wasm32-unknown-unknown__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_darwin_aarch64__wasm32-wasip1__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rw-852503484": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rw-1196008214": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rw-1757606600": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_aarch64__wasm32-unknown-unknown__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_aarch64__wasm32-wasip1__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_s390x__s390x-unknown-linux-gnu__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_s390x__wasm32-unknown-unknown__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_s390x__wasm32-wasip1__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_darwin_x86_64__x86_64-apple-darwin__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_darwin_x86_64__wasm32-unknown-unknown__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_darwin_x86_64__wasm32-wasip1__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rw-1704990954": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rw-72459030": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rw-1656419016": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_freebsd_x86_64__wasm32-unknown-unknown__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_freebsd_x86_64__wasm32-wasip1__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_x86_64__wasm32-unknown-unknown__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ],
                "rust_linux_x86_64__wasm32-wasip1__stable": [
                  "@rules_rust//rust/toolchain/channel:stable"
                ]
              },
              "exec_compatible_with": {
                "rust_analyzer_1.75.0": [],
                "rust_darwin_aarch64__aarch64-apple-darwin__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:osx"
                ],
                "rust_darwin_aarch64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:osx"
                ],
                "rust_darwin_aarch64__wasm32-wasip1__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:osx"
                ],
                "rw-852503484": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:windows"
                ],
                "rw-1196008214": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:windows"
                ],
                "rw-1757606600": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:windows"
                ],
                "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:linux"
                ],
                "rust_linux_aarch64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:linux"
                ],
                "rust_linux_aarch64__wasm32-wasip1__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:linux"
                ],
                "rust_linux_s390x__s390x-unknown-linux-gnu__stable": [
                  "@platforms//cpu:s390x",
                  "@platforms//os:linux"
                ],
                "rust_linux_s390x__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:s390x",
                  "@platforms//os:linux"
                ],
                "rust_linux_s390x__wasm32-wasip1__stable": [
                  "@platforms//cpu:s390x",
                  "@platforms//os:linux"
                ],
                "rust_darwin_x86_64__x86_64-apple-darwin__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:osx"
                ],
                "rust_darwin_x86_64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:osx"
                ],
                "rust_darwin_x86_64__wasm32-wasip1__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:osx"
                ],
                "rw-1704990954": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:windows"
                ],
                "rw-72459030": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:windows"
                ],
                "rw-1656419016": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:windows"
                ],
                "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:freebsd"
                ],
                "rust_freebsd_x86_64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:freebsd"
                ],
                "rust_freebsd_x86_64__wasm32-wasip1__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:freebsd"
                ],
                "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:linux"
                ],
                "rust_linux_x86_64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:linux"
                ],
                "rust_linux_x86_64__wasm32-wasip1__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:linux"
                ],
                "rustfmt_nightly-2024-11-28__aarch64-apple-darwin": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:osx"
                ],
                "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:windows"
                ],
                "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:linux"
                ],
                "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu": [
                  "@platforms//cpu:s390x",
                  "@platforms//os:linux"
                ],
                "rustfmt_nightly-2024-11-28__x86_64-apple-darwin": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:osx"
                ],
                "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:windows"
                ],
                "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:freebsd"
                ],
                "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:linux"
                ]
              },
              "target_compatible_with": {
                "rust_analyzer_1.75.0": [],
                "rust_darwin_aarch64__aarch64-apple-darwin__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:osx"
                ],
                "rust_darwin_aarch64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rust_darwin_aarch64__wasm32-wasip1__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rw-852503484": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:windows"
                ],
                "rw-1196008214": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rw-1757606600": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rust_linux_aarch64__aarch64-unknown-linux-gnu__stable": [
                  "@platforms//cpu:aarch64",
                  "@platforms//os:linux"
                ],
                "rust_linux_aarch64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rust_linux_aarch64__wasm32-wasip1__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rust_linux_s390x__s390x-unknown-linux-gnu__stable": [
                  "@platforms//cpu:s390x",
                  "@platforms//os:linux"
                ],
                "rust_linux_s390x__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rust_linux_s390x__wasm32-wasip1__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rust_darwin_x86_64__x86_64-apple-darwin__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:osx"
                ],
                "rust_darwin_x86_64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rust_darwin_x86_64__wasm32-wasip1__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rw-1704990954": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:windows"
                ],
                "rw-72459030": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rw-1656419016": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rust_freebsd_x86_64__x86_64-unknown-freebsd__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:freebsd"
                ],
                "rust_freebsd_x86_64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rust_freebsd_x86_64__wasm32-wasip1__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rust_linux_x86_64__x86_64-unknown-linux-gnu__stable": [
                  "@platforms//cpu:x86_64",
                  "@platforms//os:linux"
                ],
                "rust_linux_x86_64__wasm32-unknown-unknown__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:none"
                ],
                "rust_linux_x86_64__wasm32-wasip1__stable": [
                  "@platforms//cpu:wasm32",
                  "@platforms//os:wasi"
                ],
                "rustfmt_nightly-2024-11-28__aarch64-apple-darwin": [],
                "rustfmt_nightly-2024-11-28__aarch64-pc-windows-msvc": [],
                "rustfmt_nightly-2024-11-28__aarch64-unknown-linux-gnu": [],
                "rustfmt_nightly-2024-11-28__s390x-unknown-linux-gnu": [],
                "rustfmt_nightly-2024-11-28__x86_64-apple-darwin": [],
                "rustfmt_nightly-2024-11-28__x86_64-pc-windows-msvc": [],
                "rustfmt_nightly-2024-11-28__x86_64-unknown-freebsd": [],
                "rustfmt_nightly-2024-11-28__x86_64-unknown-linux-gnu": []
              }
            }
          },
          "rust_linux_aarch64__wasm32-unknown-unknown__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_linux_aarch64__wasm32-unknown-unknown__stable_tools",
              "exec_triple": "aarch64-unknown-linux-gnu",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "wasm32-unknown-unknown",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          },
          "rust_darwin_x86_64__x86_64-apple-darwin__stable_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust~rust_darwin_x86_64__x86_64-apple-darwin__stable_tools",
              "exec_triple": "x86_64-apple-darwin",
              "allocator_library": "@rules_rust//ffi/cc/allocator_library",
              "global_allocator_library": "@rules_rust//ffi/cc/global_allocator_library",
              "target_triple": "x86_64-apple-darwin",
              "version": "1.75.0",
              "rustfmt_version": "nightly/2024-11-28",
              "edition": "2021",
              "dev_components": false,
              "extra_rustc_flags": [],
              "extra_exec_rustc_flags": [],
              "opt_level": {},
              "sha256s": {},
              "urls": [
                "https://static.rust-lang.org/dist/{}.tar.xz"
              ],
              "auth": {},
              "netrc": "",
              "auth_patterns": []
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "NO"
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.21.0",
            "bazel_features_globals",
            "bazel_features~1.21.0~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.21.0",
            "bazel_features_version",
            "bazel_features~1.21.0~version_extension~bazel_features_version"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_features",
            "bazel_features~1.21.0"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_skylib",
            "bazel_skylib~1.7.1"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_rust~0.56.0",
            "rules_rust",
            "rules_rust~0.56.0"
          ]
        ]
      }
    },
    "@@rules_rust~0.56.0//rust:extensions.bzl%rust_host_tools": {
      "os:linux,arch:amd64": {
        "bzlTransitiveDigest": "2DI1cxhm4zk2FfPqM3pyNmF/voSB4eF33PHgek+kUaQ=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "rust_host_tools": {
            "bzlFile": "@@rules_rust~0.56.0//rust:repositories.bzl",
            "ruleClassName": "rust_toolchain_tools_repository",
            "attributes": {
              "name": "rules_rust~0.56.0~rust_host_tools~rust_host_tools",
              "exec_triple": "x86_64-unknown-linux-gnu",
              "target_triple": "x86_64-unknown-linux-gnu",
              "version": "1.83.0"
            }
          }
        },
        "moduleExtensionMetadata": {
          "useAllRepos": "NO"
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.21.0",
            "bazel_features_globals",
            "bazel_features~1.21.0~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.21.0",
            "bazel_features_version",
            "bazel_features~1.21.0~version_extension~bazel_features_version"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_features",
            "bazel_features~1.21.0"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_skylib",
            "bazel_skylib~1.7.1"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_rust~0.56.0",
            "rules_rust",
            "rules_rust~0.56.0"
          ]
        ]
      }
    },
    "@@rules_rust~0.56.0//rust/private:internal_extensions.bzl%i": {
      "general": {
        "bzlTransitiveDigest": "mCOFg3F9IcsTL6dWt55Tuo6zUtcV18vG9N13eNChJkE=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "rules_rust_tinyjson": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rules_rust_tinyjson",
              "sha256": "9ab95735ea2c8fd51154d01e39cf13912a78071c2d89abc49a7ef102a7dd725a",
              "url": "https://static.crates.io/crates/tinyjson/tinyjson-2.5.1.crate",
              "strip_prefix": "tinyjson-2.5.1",
              "type": "tar.gz",
              "build_file": "@@rules_rust~0.56.0//util/process_wrapper:BUILD.tinyjson.bazel"
            }
          },
          "rrra__proc-macro2-1.0.64": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__proc-macro2-1.0.64",
              "sha256": "78803b62cbf1f46fde80d7c0e803111524b9877184cfe7c3033659490ac7a7da",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/proc-macro2/1.0.64/download"
              ],
              "strip_prefix": "proc-macro2-1.0.64",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.proc-macro2-1.0.64.bazel"
            }
          },
          "rrra__errno-0.3.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__errno-0.3.1",
              "sha256": "4bcfec3a70f97c962c307b2d2c56e358cf1d00b558d74262b5f929ee8cc7e73a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/errno/0.3.1/download"
              ],
              "strip_prefix": "errno-0.3.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.errno-0.3.1.bazel"
            }
          },
          "rrra__windows_i686_msvc-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_i686_msvc-0.48.0",
              "sha256": "4542c6e364ce21bf45d69fdd2a8e455fa38d316158cfd43b3ac1c5b1b19f8e00",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_msvc/0.48.0/download"
              ],
              "strip_prefix": "windows_i686_msvc-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_i686_msvc-0.48.0.bazel"
            }
          },
          "rrra__strsim-0.10.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__strsim-0.10.0",
              "sha256": "73473c0e59e6d5812c5dfe2a064a6444949f089e20eec9a2e5506596494e4623",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/strsim/0.10.0/download"
              ],
              "strip_prefix": "strsim-0.10.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.strsim-0.10.0.bazel"
            }
          },
          "rrra__winapi-i686-pc-windows-gnu-0.4.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__winapi-i686-pc-windows-gnu-0.4.0",
              "sha256": "ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi-i686-pc-windows-gnu/0.4.0/download"
              ],
              "strip_prefix": "winapi-i686-pc-windows-gnu-0.4.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.winapi-i686-pc-windows-gnu-0.4.0.bazel"
            }
          },
          "rrra__itoa-1.0.8": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__itoa-1.0.8",
              "sha256": "62b02a5381cc465bd3041d84623d0fa3b66738b52b8e2fc3bab8ad63ab032f4a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/itoa/1.0.8/download"
              ],
              "strip_prefix": "itoa-1.0.8",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.itoa-1.0.8.bazel"
            }
          },
          "rrra__serde_json-1.0.102": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__serde_json-1.0.102",
              "sha256": "b5062a995d481b2308b6064e9af76011f2921c35f97b0468811ed9f6cd91dfed",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/serde_json/1.0.102/download"
              ],
              "strip_prefix": "serde_json-1.0.102",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.serde_json-1.0.102.bazel"
            }
          },
          "rrra__anstyle-query-1.0.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__anstyle-query-1.0.0",
              "sha256": "5ca11d4be1bab0c8bc8734a9aa7bf4ee8316d462a08c6ac5052f888fef5b494b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle-query/1.0.0/download"
              ],
              "strip_prefix": "anstyle-query-1.0.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.anstyle-query-1.0.0.bazel"
            }
          },
          "rrra__quote-1.0.29": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__quote-1.0.29",
              "sha256": "573015e8ab27661678357f27dc26460738fd2b6c86e46f386fde94cb5d913105",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/quote/1.0.29/download"
              ],
              "strip_prefix": "quote-1.0.29",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.quote-1.0.29.bazel"
            }
          },
          "rrra__windows_x86_64_msvc-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_x86_64_msvc-0.48.0",
              "sha256": "1a515f5799fe4961cb532f983ce2b23082366b898e52ffbce459c86f67c8378a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_msvc/0.48.0/download"
              ],
              "strip_prefix": "windows_x86_64_msvc-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_x86_64_msvc-0.48.0.bazel"
            }
          },
          "rrra__clap_derive-4.3.2": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__clap_derive-4.3.2",
              "sha256": "b8cd2b2a819ad6eec39e8f1d6b53001af1e5469f8c177579cdaeb313115b825f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clap_derive/4.3.2/download"
              ],
              "strip_prefix": "clap_derive-4.3.2",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.clap_derive-4.3.2.bazel"
            }
          },
          "rrra__regex-1.9.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__regex-1.9.1",
              "sha256": "b2eae68fc220f7cf2532e4494aded17545fce192d59cd996e0fe7887f4ceb575",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/regex/1.9.1/download"
              ],
              "strip_prefix": "regex-1.9.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.regex-1.9.1.bazel"
            }
          },
          "rrra__windows-sys-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows-sys-0.48.0",
              "sha256": "677d2418bec65e3338edb076e806bc1ec15693c5d0104683f2efe857f61056a9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-sys/0.48.0/download"
              ],
              "strip_prefix": "windows-sys-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows-sys-0.48.0.bazel"
            }
          },
          "rrra__windows_aarch64_msvc-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_aarch64_msvc-0.48.0",
              "sha256": "b2ef27e0d7bdfcfc7b868b317c1d32c641a6fe4629c171b8928c7b08d98d7cf3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_msvc/0.48.0/download"
              ],
              "strip_prefix": "windows_aarch64_msvc-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_aarch64_msvc-0.48.0.bazel"
            }
          },
          "rrra__unicode-ident-1.0.10": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__unicode-ident-1.0.10",
              "sha256": "22049a19f4a68748a168c0fc439f9516686aa045927ff767eca0a85101fb6e73",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/unicode-ident/1.0.10/download"
              ],
              "strip_prefix": "unicode-ident-1.0.10",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.unicode-ident-1.0.10.bazel"
            }
          },
          "rrra__anyhow-1.0.71": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__anyhow-1.0.71",
              "sha256": "9c7d0618f0e0b7e8ff11427422b64564d5fb0be1940354bfe2e0529b18a9d9b8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anyhow/1.0.71/download"
              ],
              "strip_prefix": "anyhow-1.0.71",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.anyhow-1.0.71.bazel"
            }
          },
          "rrra__anstyle-wincon-1.0.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__anstyle-wincon-1.0.1",
              "sha256": "180abfa45703aebe0093f79badacc01b8fd4ea2e35118747e5811127f926e188",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle-wincon/1.0.1/download"
              ],
              "strip_prefix": "anstyle-wincon-1.0.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.anstyle-wincon-1.0.1.bazel"
            }
          },
          "rrra__aho-corasick-1.0.2": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__aho-corasick-1.0.2",
              "sha256": "43f6cb1bf222025340178f382c426f13757b2960e89779dfcb319c32542a5a41",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/aho-corasick/1.0.2/download"
              ],
              "strip_prefix": "aho-corasick-1.0.2",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.aho-corasick-1.0.2.bazel"
            }
          },
          "rrra__rustix-0.37.23": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__rustix-0.37.23",
              "sha256": "4d69718bf81c6127a49dc64e44a742e8bb9213c0ff8869a22c308f84c1d4ab06",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/rustix/0.37.23/download"
              ],
              "strip_prefix": "rustix-0.37.23",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.rustix-0.37.23.bazel"
            }
          },
          "rrra__ryu-1.0.14": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__ryu-1.0.14",
              "sha256": "fe232bdf6be8c8de797b22184ee71118d63780ea42ac85b61d1baa6d3b782ae9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/ryu/1.0.14/download"
              ],
              "strip_prefix": "ryu-1.0.14",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.ryu-1.0.14.bazel"
            }
          },
          "rrra__serde-1.0.171": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__serde-1.0.171",
              "sha256": "30e27d1e4fd7659406c492fd6cfaf2066ba8773de45ca75e855590f856dc34a9",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/serde/1.0.171/download"
              ],
              "strip_prefix": "serde-1.0.171",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.serde-1.0.171.bazel"
            }
          },
          "rrra__winapi-x86_64-pc-windows-gnu-0.4.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__winapi-x86_64-pc-windows-gnu-0.4.0",
              "sha256": "712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi-x86_64-pc-windows-gnu/0.4.0/download"
              ],
              "strip_prefix": "winapi-x86_64-pc-windows-gnu-0.4.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.winapi-x86_64-pc-windows-gnu-0.4.0.bazel"
            }
          },
          "rrra__anstyle-1.0.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__anstyle-1.0.1",
              "sha256": "3a30da5c5f2d5e72842e00bcb57657162cdabef0931f40e2deb9b4140440cecd",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle/1.0.1/download"
              ],
              "strip_prefix": "anstyle-1.0.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.anstyle-1.0.1.bazel"
            }
          },
          "rrra__regex-syntax-0.7.4": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__regex-syntax-0.7.4",
              "sha256": "e5ea92a5b6195c6ef2a0295ea818b312502c6fc94dde986c5553242e18fd4ce2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/regex-syntax/0.7.4/download"
              ],
              "strip_prefix": "regex-syntax-0.7.4",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.regex-syntax-0.7.4.bazel"
            }
          },
          "rrra__itertools-0.11.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__itertools-0.11.0",
              "sha256": "b1c173a5686ce8bfa551b3563d0c2170bf24ca44da99c7ca4bfdab5418c3fe57",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/itertools/0.11.0/download"
              ],
              "strip_prefix": "itertools-0.11.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.itertools-0.11.0.bazel"
            }
          },
          "rrra__syn-2.0.25": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__syn-2.0.25",
              "sha256": "15e3fc8c0c74267e2df136e5e5fb656a464158aa57624053375eb9c8c6e25ae2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/syn/2.0.25/download"
              ],
              "strip_prefix": "syn-2.0.25",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.syn-2.0.25.bazel"
            }
          },
          "rrra__utf8parse-0.2.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__utf8parse-0.2.1",
              "sha256": "711b9620af191e0cdc7468a8d14e709c3dcdb115b36f838e601583af800a370a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/utf8parse/0.2.1/download"
              ],
              "strip_prefix": "utf8parse-0.2.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.utf8parse-0.2.1.bazel"
            }
          },
          "rrra__winapi-util-0.1.5": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__winapi-util-0.1.5",
              "sha256": "70ec6ce85bb158151cae5e5c87f95a8e97d2c0c4b001223f33a334e3ce5de178",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi-util/0.1.5/download"
              ],
              "strip_prefix": "winapi-util-0.1.5",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.winapi-util-0.1.5.bazel"
            }
          },
          "rrra__libc-0.2.147": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__libc-0.2.147",
              "sha256": "b4668fb0ea861c1df094127ac5f1da3409a82116a4ba74fca2e58ef927159bb3",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/libc/0.2.147/download"
              ],
              "strip_prefix": "libc-0.2.147",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.libc-0.2.147.bazel"
            }
          },
          "rrra__windows_x86_64_gnu-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_x86_64_gnu-0.48.0",
              "sha256": "ca2b8a661f7628cbd23440e50b05d705db3686f894fc9580820623656af974b1",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnu/0.48.0/download"
              ],
              "strip_prefix": "windows_x86_64_gnu-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_x86_64_gnu-0.48.0.bazel"
            }
          },
          "rrra__winapi-0.3.9": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__winapi-0.3.9",
              "sha256": "5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/winapi/0.3.9/download"
              ],
              "strip_prefix": "winapi-0.3.9",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.winapi-0.3.9.bazel"
            }
          },
          "rrra__log-0.4.19": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__log-0.4.19",
              "sha256": "b06a4cde4c0f271a446782e3eff8de789548ce57dbc8eca9292c27f4a42004b4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/log/0.4.19/download"
              ],
              "strip_prefix": "log-0.4.19",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.log-0.4.19.bazel"
            }
          },
          "rrra__termcolor-1.2.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__termcolor-1.2.0",
              "sha256": "be55cf8942feac5c765c2c993422806843c9a9a45d4d5c407ad6dd2ea95eb9b6",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/termcolor/1.2.0/download"
              ],
              "strip_prefix": "termcolor-1.2.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.termcolor-1.2.0.bazel"
            }
          },
          "rrra__once_cell-1.18.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__once_cell-1.18.0",
              "sha256": "dd8b5dd2ae5ed71462c540258bedcb51965123ad7e7ccf4b9a8cafaa4a63576d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/once_cell/1.18.0/download"
              ],
              "strip_prefix": "once_cell-1.18.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.once_cell-1.18.0.bazel"
            }
          },
          "rrra__io-lifetimes-1.0.11": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__io-lifetimes-1.0.11",
              "sha256": "eae7b9aee968036d54dce06cebaefd919e4472e753296daccd6d344e3e2df0c2",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/io-lifetimes/1.0.11/download"
              ],
              "strip_prefix": "io-lifetimes-1.0.11",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.io-lifetimes-1.0.11.bazel"
            }
          },
          "rrra__windows-targets-0.48.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows-targets-0.48.1",
              "sha256": "05d4b17490f70499f20b9e791dcf6a299785ce8af4d709018206dc5b4953e95f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows-targets/0.48.1/download"
              ],
              "strip_prefix": "windows-targets-0.48.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows-targets-0.48.1.bazel"
            }
          },
          "rrra__anstream-0.3.2": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__anstream-0.3.2",
              "sha256": "0ca84f3628370c59db74ee214b3263d58f9aadd9b4fe7e711fd87dc452b7f163",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstream/0.3.2/download"
              ],
              "strip_prefix": "anstream-0.3.2",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.anstream-0.3.2.bazel"
            }
          },
          "rrra__bitflags-1.3.2": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__bitflags-1.3.2",
              "sha256": "bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/bitflags/1.3.2/download"
              ],
              "strip_prefix": "bitflags-1.3.2",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.bitflags-1.3.2.bazel"
            }
          },
          "rrra__serde_derive-1.0.171": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__serde_derive-1.0.171",
              "sha256": "389894603bd18c46fa56231694f8d827779c0951a667087194cf9de94ed24682",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/serde_derive/1.0.171/download"
              ],
              "strip_prefix": "serde_derive-1.0.171",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.serde_derive-1.0.171.bazel"
            }
          },
          "rrra__clap_builder-4.3.11": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__clap_builder-4.3.11",
              "sha256": "98c59138d527eeaf9b53f35a77fcc1fad9d883116070c63d5de1c7dc7b00c72b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clap_builder/4.3.11/download"
              ],
              "strip_prefix": "clap_builder-4.3.11",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.clap_builder-4.3.11.bazel"
            }
          },
          "rrra__windows_aarch64_gnullvm-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_aarch64_gnullvm-0.48.0",
              "sha256": "91ae572e1b79dba883e0d315474df7305d12f569b400fcf90581b06062f7e1bc",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_aarch64_gnullvm/0.48.0/download"
              ],
              "strip_prefix": "windows_aarch64_gnullvm-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_aarch64_gnullvm-0.48.0.bazel"
            }
          },
          "rrra__colorchoice-1.0.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__colorchoice-1.0.0",
              "sha256": "acbf1af155f9b9ef647e42cdc158db4b64a1b61f743629225fde6f3e0be2a7c7",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/colorchoice/1.0.0/download"
              ],
              "strip_prefix": "colorchoice-1.0.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.colorchoice-1.0.0.bazel"
            }
          },
          "rrra__windows_x86_64_gnullvm-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_x86_64_gnullvm-0.48.0",
              "sha256": "7896dbc1f41e08872e9d5e8f8baa8fdd2677f29468c4e156210174edc7f7b953",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_x86_64_gnullvm/0.48.0/download"
              ],
              "strip_prefix": "windows_x86_64_gnullvm-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_x86_64_gnullvm-0.48.0.bazel"
            }
          },
          "rrra__clap-4.3.11": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__clap-4.3.11",
              "sha256": "1640e5cc7fb47dbb8338fd471b105e7ed6c3cb2aeb00c2e067127ffd3764a05d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clap/4.3.11/download"
              ],
              "strip_prefix": "clap-4.3.11",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.clap-4.3.11.bazel"
            }
          },
          "rrra__either-1.8.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__either-1.8.1",
              "sha256": "7fcaabb2fef8c910e7f4c7ce9f67a1283a1715879a7c230ca9d6d1ae31f16d91",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/either/1.8.1/download"
              ],
              "strip_prefix": "either-1.8.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.either-1.8.1.bazel"
            }
          },
          "rrra__env_logger-0.10.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__env_logger-0.10.0",
              "sha256": "85cdab6a89accf66733ad5a1693a4dcced6aeff64602b634530dd73c1f3ee9f0",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/env_logger/0.10.0/download"
              ],
              "strip_prefix": "env_logger-0.10.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.env_logger-0.10.0.bazel"
            }
          },
          "rrra__windows_i686_gnu-0.48.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__windows_i686_gnu-0.48.0",
              "sha256": "622a1962a7db830d6fd0a69683c80a18fda201879f0f447f065a3b7467daa241",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/windows_i686_gnu/0.48.0/download"
              ],
              "strip_prefix": "windows_i686_gnu-0.48.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.windows_i686_gnu-0.48.0.bazel"
            }
          },
          "rrra__clap_lex-0.5.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__clap_lex-0.5.0",
              "sha256": "2da6da31387c7e4ef160ffab6d5e7f00c42626fe39aea70a7b0f1773f7dd6c1b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/clap_lex/0.5.0/download"
              ],
              "strip_prefix": "clap_lex-0.5.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.clap_lex-0.5.0.bazel"
            }
          },
          "rrra__regex-automata-0.3.3": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__regex-automata-0.3.3",
              "sha256": "39354c10dd07468c2e73926b23bb9c2caca74c5501e38a35da70406f1d923310",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/regex-automata/0.3.3/download"
              ],
              "strip_prefix": "regex-automata-0.3.3",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.regex-automata-0.3.3.bazel"
            }
          },
          "rrra__cc-1.0.79": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__cc-1.0.79",
              "sha256": "50d30906286121d95be3d479533b458f87493b30a4b5f79a607db8f5d11aa91f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/cc/1.0.79/download"
              ],
              "strip_prefix": "cc-1.0.79",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.cc-1.0.79.bazel"
            }
          },
          "rrra__is-terminal-0.4.7": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__is-terminal-0.4.7",
              "sha256": "adcf93614601c8129ddf72e2d5633df827ba6551541c6d8c59520a371475be1f",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/is-terminal/0.4.7/download"
              ],
              "strip_prefix": "is-terminal-0.4.7",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.is-terminal-0.4.7.bazel"
            }
          },
          "rrra__errno-dragonfly-0.1.2": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__errno-dragonfly-0.1.2",
              "sha256": "aa68f1b12764fab894d2755d2518754e71b4fd80ecfb822714a1206c2aab39bf",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/errno-dragonfly/0.1.2/download"
              ],
              "strip_prefix": "errno-dragonfly-0.1.2",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.errno-dragonfly-0.1.2.bazel"
            }
          },
          "rrra__heck-0.4.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__heck-0.4.1",
              "sha256": "95505c38b4572b2d910cecb0281560f54b440a19336cbbcb27bf6ce6adc6f5a8",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/heck/0.4.1/download"
              ],
              "strip_prefix": "heck-0.4.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.heck-0.4.1.bazel"
            }
          },
          "rrra__hermit-abi-0.3.2": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__hermit-abi-0.3.2",
              "sha256": "443144c8cdadd93ebf52ddb4056d257f5b52c04d3c804e657d19eb73fc33668b",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/hermit-abi/0.3.2/download"
              ],
              "strip_prefix": "hermit-abi-0.3.2",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.hermit-abi-0.3.2.bazel"
            }
          },
          "rrra__linux-raw-sys-0.3.8": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__linux-raw-sys-0.3.8",
              "sha256": "ef53942eb7bf7ff43a617b3e2c1c4a5ecf5944a7c1bc12d7ee39bbb15e5c1519",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/linux-raw-sys/0.3.8/download"
              ],
              "strip_prefix": "linux-raw-sys-0.3.8",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.linux-raw-sys-0.3.8.bazel"
            }
          },
          "rrra__memchr-2.5.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__memchr-2.5.0",
              "sha256": "2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/memchr/2.5.0/download"
              ],
              "strip_prefix": "memchr-2.5.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.memchr-2.5.0.bazel"
            }
          },
          "rrra__humantime-2.1.0": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__humantime-2.1.0",
              "sha256": "9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/humantime/2.1.0/download"
              ],
              "strip_prefix": "humantime-2.1.0",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.humantime-2.1.0.bazel"
            }
          },
          "rrra__anstyle-parse-0.2.1": {
            "bzlFile": "@@bazel_tools//tools/build_defs/repo:http.bzl",
            "ruleClassName": "http_archive",
            "attributes": {
              "name": "rules_rust~0.56.0~i~rrra__anstyle-parse-0.2.1",
              "sha256": "938874ff5980b03a87c5524b3ae5b59cf99b1d6bc836848df7bc5ada9643c333",
              "type": "tar.gz",
              "urls": [
                "https://static.crates.io/crates/anstyle-parse/0.2.1/download"
              ],
              "strip_prefix": "anstyle-parse-0.2.1",
              "build_file": "@@rules_rust~0.56.0//tools/rust_analyzer/3rdparty/crates:BUILD.anstyle-parse-0.2.1.bazel"
            }
          }
        },
        "moduleExtensionMetadata": {
          "explicitRootModuleDirectDeps": [
            "rules_rust_tinyjson",
            "rrra__anyhow-1.0.71",
            "rrra__clap-4.3.11",
            "rrra__env_logger-0.10.0",
            "rrra__itertools-0.11.0",
            "rrra__log-0.4.19",
            "rrra__serde-1.0.171",
            "rrra__serde_json-1.0.102"
          ],
          "explicitRootModuleDirectDevDeps": [],
          "useAllRepos": "NO"
        },
        "recordedRepoMappingEntries": [
          [
            "rules_rust~0.56.0",
            "bazel_skylib",
            "bazel_skylib~1.7.1"
          ],
          [
            "rules_rust~0.56.0",
            "bazel_tools",
            "bazel_tools"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__anyhow-1.0.71",
            "rules_rust~0.56.0~i~rrra__anyhow-1.0.71"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__clap-4.3.11",
            "rules_rust~0.56.0~i~rrra__clap-4.3.11"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__env_logger-0.10.0",
            "rules_rust~0.56.0~i~rrra__env_logger-0.10.0"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__itertools-0.11.0",
            "rules_rust~0.56.0~i~rrra__itertools-0.11.0"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__log-0.4.19",
            "rules_rust~0.56.0~i~rrra__log-0.4.19"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__serde-1.0.171",
            "rules_rust~0.56.0~i~rrra__serde-1.0.171"
          ],
          [
            "rules_rust~0.56.0",
            "rrra__serde_json-1.0.102",
            "rules_rust~0.56.0~i~rrra__serde_json-1.0.102"
          ]
        ]
      }
    },
    "@@rules_shell~0.3.0//shell/private/extensions:sh_configure.bzl%sh_configure": {
      "general": {
        "bzlTransitiveDigest": "OB0Jo06ZF5V3OGj+wglfzlar4ZqicPvxAcSCC46GAQ4=",
        "accumulatedFileDigests": {},
        "envVariables": {},
        "generatedRepoSpecs": {
          "local_config_shell": {
            "bzlFile": "@@rules_shell~0.3.0//shell/private/repositories:sh_config.bzl",
            "ruleClassName": "sh_config",
            "attributes": {
              "name": "rules_shell~0.3.0~sh_configure~local_config_shell"
            }
          }
        },
        "recordedRepoMappingEntries": [
          [
            "bazel_features~1.21.0",
            "bazel_features_globals",
            "bazel_features~1.21.0~version_extension~bazel_features_globals"
          ],
          [
            "bazel_features~1.21.0",
            "bazel_features_version",
            "bazel_features~1.21.0~version_extension~bazel_features_version"
          ],
          [
            "rules_shell~0.3.0",
            "bazel_features",
            "bazel_features~1.21.0"
          ]
        ]
      }
    }
  }
}
